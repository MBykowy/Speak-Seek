High-Level Plan
---------------
	Setup & Configuration:
		Integrate necessary libraries and Firebase services.

	Core Data Modeling:
		Define how vocabulary, user progress, and settings will be stored.

	Language Selection:
		Implement functionality for the user to choose their target learning language.

	Object Recognition Exercise Implementation:
		Build the core interactive feature using the camera and ML Kit.

	Gamification Implementation:
		Add points system and display progress.

	UI Integration & Navigation:
		Connect all screens and refine the user experience.

	Testing & Refinement:
		Ensure the app works correctly and polish the details.


Proposed File Structure
-----------------------
	com.example.a404
	├── App.java
	├── data
	│   ├── model
	│   │   ├── UserProfile.java
	│   │   └── VocabularyItem.java
	│   ├── repository
	│   │   ├── AuthRepository.java
	│   │   ├── UserRepository.java
	│   │   └── VocabularyRepository.java
	│   └── source
	│       └── FirebaseSource.java
	├── di
	│   ├── AppModule.java
	│   └── ViewModelModule.java
	├── ui
	│   ├── auth
	│   │   ├── SignInActivity.java
	│   │   ├── SignUpActivity.java
	│   │   ├── ForgotPasswordActivity.java
	│   │   └── AuthViewModel.java
	│   ├── home
	│   │   ├── HomeFragment.java
	│   │   └── HomeViewModel.java
	│   ├── profile
	│   │   ├── ProfileFragment.java
	│   │   └── ProfileViewModel.java
	│   ├── language
	│   │   ├── LanguageSelectionFragment.java
	│   │   └── LanguageSelectionViewModel.java
	│   ├── exercise
	│   │   ├── ExerciseListFragment.java
	│   │   ├── ObjectRecognitionFragment.java
	│   │   └── ObjectRecognitionViewModel.java
	│   └── adapters
	├── service
	│   └── TextToSpeechService.java
	└── util
	    ├── Constants.java
	    ├── CameraUtil.java
	    └── MlkItUtil.java


Detailed Development Steps (Points)
-----------------------------------

Phase 1: Setup & Configuration
------------------------------
	Text-To-Speech (TTS) Setup:
		- Create service/TextToSpeechService.java
		- Initialize TTS engine, handle language, provide speak() method

Phase 2: Core Data Modeling & Repository Setup
----------------------------------------------
	Model Classes (data/model):
		- UserProfile.java
			• userId: String
			• points: int
			• selectedLanguageCode: String

		- VocabularyItem.java
			• objectLabel: String
			• languageCode: String
			• translation: String

	Repositories (data/repository):
		- UserRepository.java
			• getUserProfile(String): LiveData<UserProfile>
			• updateUserProfile(UserProfile)
			• updatePoints(String, int)
			• updateSelectedLanguage(String, String)

		- VocabularyRepository.java
			• getTranslation(String, String): LiveData<String>
			• loadInitialVocabulary() (optional)

	Firebase Source (data/source):
		- FirebaseSource.java
			• Helpers for Firestore (get/set/update)

Phase 3: Language Selection
---------------------------
	UI (ui/language):
		- fragment_language_selection.xml
			• Layout for choosing language

		- LanguageSelectionFragment.java
			• Inflate layout, observe ViewModel, handle clicks

		- LanguageSelectionViewModel.java
			• Inject UserRepository
			• Method: selectLanguage(userId, languageCode)
			• LiveData: languageUpdateStatus

	Navigation:
		- If no language selected → redirect to LanguageSelectionFragment

Phase 4: Translation Quiz Exercise Implementation
---------------------------

Create UI (ui/exercise):

    Rename/Create layout file: fragment_translation_quiz.xml (instead of fragment_object_recognition.xml)

    Layout Elements:

        - TextView (textView_instruction): To show instructions (e.g., "Translate this word:")
        - TextView (textView_sourceWord): To display the word that needs translating
        - Button (button_choice1), Button (button_choice2), Button (button_choice3), Button (button_choice4): Four translation options
        - TextView (textView_feedback): To display "Correct!" or "Incorrect. The answer was..."
        - Button (button_nextQuestion): To move to the next word (initially hidden or disabled)
        - (Optional) TextView (textView_score): To show current quiz score or progress

    Note: No PreviewView needed

Create Fragment (ui/exercise):

    - Rename/Create class: TranslationQuizFragment.java
    - Use View Binding to access layout elements
    - Inject/get instance of TranslationQuizViewModel
    - Inject/get instance of TextToSpeechService

    Observe ViewModel LiveData:

        - currentSourceWord: Update textView_sourceWord
        - answerChoices: Update button_choice1 to button_choice4, reset button styles, enable buttons
        - feedbackMessage: Update textView_feedback
        - isAnswerCorrect: Style clicked button (green/red), optionally highlight correct answer, trigger TTS if correct
        - showNextButton: Control visibility/enabled state of button_nextQuestion
        - quizFinished: (Optional) Navigate away or show summary when quiz ends

    Setup Button Listeners:

        - For each choice button:
            - Set OnClickListener
            - Call viewModel.submitAnswer(selectedText)
            - Disable all choice buttons

        - For "Next Question" button:
            - Set OnClickListener
            - Call viewModel.loadNextQuestion()
            - Hide/disable next button
            - Clear feedback text

    TTS Integration:

        - If isAnswerCorrect is true, call textToSpeechService.speak(correctAnswerText)
        - Ensure TTS is initialized and language is correct

    Initial Loading:

        - On fragment start, call viewModel.startQuiz(userId, selectedLanguage)

Create ViewModel (ui/exercise):

    - Rename/Create class: TranslationQuizViewModel.java
    - Inject VocabularyRepository, UserRepository, TextToSpeechService

    LiveData:

        - currentSourceWord: MutableLiveData<String>
        - answerChoices: MutableLiveData<List<String>>
        - feedbackMessage: MutableLiveData<String>
        - isAnswerCorrect: MutableLiveData<Boolean?> (nullable)
        - showNextButton: MutableLiveData<Boolean>
        - correctAnswer: MutableLiveData<String>
        - userPoints: LiveData<Int> (from UserRepository)
        - quizFinished: MutableLiveData<Boolean> (optional)

    Internal State:

        - quizWordList: List<VocabularyItem>
        - currentQuestionIndex: int
        - currentCorrectAnswer: String
        - userId: String

    Methods:

        startQuiz(userId: String, languageCode: String, numberOfQuestions: Int = 10):

            - Store userId
            - Fetch numberOfQuestions * 4 words from vocabularyRepository
            - Store in quizWordList, shuffle
            - Reset index to 0
            - Call loadNextQuestion()

        loadNextQuestion():

            - If out of bounds, set quizFinished to true and return
            - Get item at currentQuestionIndex
            - Assume native -> target translation direction
            - Set currentSourceWord LiveData
            - Set currentCorrectAnswer and post to correctAnswer LiveData
            - Generate 3 unique distractors
            - Shuffle correct + distractors, post to answerChoices
            - Reset isAnswerCorrect to null
            - Reset feedbackMessage to ""
            - Set showNextButton to false

        submitAnswer(selectedAnswer: String):

            - Compare with currentCorrectAnswer

            - If correct:
                - Set isAnswerCorrect to true
                - Set feedbackMessage to "Correct!"
                - Call userRepository.updatePoints(userId, 1)

            - If incorrect:
                - Set isAnswerCorrect to false
                - Set feedbackMessage to "Incorrect. The answer was: " + currentCorrectAnswer

            - Set showNextButton to true
            - Increment currentQuestionIndex

Update Repositories (if needed):

    - VocabularyRepository should have: getRandomVocabularyItems(languageCode: String, count: Int): LiveData<List<VocabularyItem>>

Phase 5: Gamification & Progress Display
---------------------------

    - Points are awarded in TranslationQuizViewModel.submitAnswer
    - ProfileFragment/ProfileViewModel already display user points
    - HomeFragment/HomeViewModel can continue showing points from UserRepository

Phase 6: UI Integration & Navigation
---------------------------

    - Navigation Graph (res/navigation/nav_graph.xml):
        - Rename destination ID to translationQuizFragment
        - Update action ID (e.g., action_homeFragment_to_translationQuizFragment)

    - In HomeFragment (or wherever start happens):
        - Update button/item click listener to use new action ID

Phase 7: Testing & Refinement
---------------------------

    Manual Testing:

        - Fetch vocab for different languages
        - Quiz logic: display, choice variety, checking, feedback
        - Point awarding and display
        - TTS pronunciation
        - "Next Question" and quiz completion
        - Edge cases (e.g., not enough vocab)

    Error Handling:

        - Check for empty lists, Firebase fetch issues, TTS errors

    Final Cleanup:

        - Code refactor and cleanup

    (Optional) Unit/Integration Tests:

        - Test ViewModel logic: quiz flow, answer checking, point system
        - Test Repository methods
